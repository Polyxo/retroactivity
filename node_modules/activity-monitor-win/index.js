var Promise = require('promise');
var edge = require('electron-edge');
var path = require('path');
var fs = require('fs');

function makeLibFunction(name)
{
    return Promise.denodeify(edge.func({ assemblyFile: path.join(__dirname, 'csharp/ActivityMonitor/bin/Debug', 'ActivityMonitor.dll'), typeName: 'ActivityMonitor.Library', methodName: name }));
}

var library =
{
  getForegroundWindow: makeLibFunction('GetForegroundWindow'),
  getWindowText: makeLibFunction('GetWindowText'),
  getWindowIcon: makeLibFunction('GetWindowIcon'),
  getWindowColor: makeLibFunction('GetWindowColor'),
  getWindowExecutablePath: makeLibFunction('GetWindowExecutablePath'),
  getWindowPID: makeLibFunction('GetWindowPID'),
  getWindowProgramName: makeLibFunction('GetWindowProgramName')
};

function ActivityMonitor()
{
};

ActivityMonitor.prototype = 
{
  getActiveWindow: function getActiveWindow()
  {
    return library.getForegroundWindow('nothing').then(function(winId)
    {
        return new ActivityMonitor.Window(this, winId);
    }.bind(this));
  }
};

ActivityMonitor.Window = function Window(am, id)
{
    this.id = id;
};

ActivityMonitor.Window.prototype =
{
    getProgramName: function getProgramName()
    {
        return library.getWindowProgramName(this.id);
    },

    getLocalisedProgramName: function getLocalisedProgramName()
    {
        //FIXME: find out how program names are localised under win
        return library.getWindowProgramName(this.id);
    },

    getTitle: function getTitle()
    {
        return library.getWindowText(this.id);
    },

    getIcon: function getIcon()
    {
        return library.getWindowIcon(this.id);
    },

    getColor: function getColor()
    {
        function hexByte(decstr)
        {
            return ('00' + parseInt(decstr).toString(16)).substr(-2);
        }

        return library.getWindowColor(this.id).then(function(color)
            {
                return '#' + hexByte(color.R) + hexByte(color.G) + hexByte(color.B);
            });
    },

    getExecutablePath: function getExecutablePath()
    {
        return library.getWindowExecutablePath(this.id);
    },

    getPID: function getPID()
    {
        return library.getWindowPID(this.id);
    },

    //get a plain object with information used to match windows by application
    getKeyObject: function()
    {
        var properties = 
        [
            'windowTitle', this.getTitle(),
            'pid', this.getPID(),
            'windowID', this.id,
            'exeFile', this.getExecutablePath(),
            'programName', this.getProgramName()
        ];

        return Promise.all(properties)
            .then(function(result)
            {
              var obj = { };
              for(var i = 0; i < result.length; i += 2)
              {
                obj[result[i]] = result[i+1];
              }
              return obj;
            });
    },

    getFrozen: function()
    {
        return Promise.all(
        [
          'id', this.id,
          'programName', this.getProgramName(),
          'localisedProgramName', this.getLocalisedProgramName(),
          'icon', this.getIcon(48),
          'color', this.getColor()
        ]).then(function(result)
        {
          var obj = { };
          for(var i = 0; i < result.length; i += 2)
          {
            obj[result[i]] = result[i+1];
          }
          return obj;
        });
    }
};

ActivityMonitor.Window.exampleKey =
{
  windowID: 123,
  pid: 123,
  exeFile: 'C:/some/path',
  programName: 'Some String',
  windowTitle: 'Some - String'
};

ActivityMonitor.Window.exampleData =
{
  'programName': 'some_string',
  'localisedProgramName': 'some_string',
  'icon': new Buffer(['1', '2', '3']),
  'color': '#123456'
};

ActivityMonitor.Window.keyScores =
{
  windowID: 12,
  pid: 10,
  exeFile: 8,
  programName: 5,
  windowTitle: 3
};

/*
var am = new ActivityMonitor();
am.getActiveWindow().then(function(win)
{
    console.log("Window:", win);
    win.getTitle().then(function(title)
    {
        console.log("Title:", title);
    });

    win.getIcon().then(function(data)
    {
        console.log("Icon", data);
        fs.writeFile('icon.png', data);
    });

    win.getColor().then(function(color)
    {
        console.log("Color", color);
    });

    win.getExecutablePath().then(function(p)
    {
        console.log("Path", p);
    });

    win.getPID().then(function(p)
    {
        console.log("PID", p);
    });

    win.getProgramName().then(function(p)
    {
        console.log("Name", p);
    });
}, function(err)
{
    console.log("err", err);
})*/

module.exports = exports = ActivityMonitor;