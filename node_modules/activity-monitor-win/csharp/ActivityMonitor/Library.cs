using System;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Drawing;
using System.IO;

namespace ActivityMonitor
{

    public class Library
    {
        [DllImport("user32.dll")]
        static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

        public async Task<object> GetForegroundWindow(object input)
        {
            return GetForegroundWindow().ToInt32();
        }

        public async Task<object> GetWindowText(object input)
        {
            const int nChars = 256;
            StringBuilder Buff = new StringBuilder(nChars);
            IntPtr handle = new IntPtr((int)input);

            if (GetWindowText(handle, Buff, nChars) > 0)
            {
                return Buff.ToString();
            }

            throw new ArgumentException("Window does not have a title", "origin");
        }

        public async Task<object> GetWindowExecutablePath(object input)
        {
            IntPtr windowHandle = new IntPtr((int)input);
            Process process = Util.GetProcessByWindow(windowHandle);
            return process.MainModule.FileName;
        }

        public async Task<object> GetWindowProgramName(object input)
        {
            IntPtr windowHandle = new IntPtr((int)input);
            Process process = Util.GetProcessByWindow(windowHandle);
            string name = process.MainModule.FileVersionInfo.FileDescription;
            if(name == null)
            {
                name = process.MainModule.ModuleName;
            }
            return name;
        }

        public async Task<object> GetWindowPID(object input)
        {
            IntPtr windowHandle = new IntPtr((int)input);
            Process process = Util.GetProcessByWindow(windowHandle);
            return process.Id;
        }

        public async Task<object> GetWindowIcon(object input)
        {
            IntPtr windowHandle = new IntPtr((int)input);
            Process process = Util.GetProcessByWindow(windowHandle);
            Icon ico = Icon.ExtractAssociatedIcon(process.MainModule.FileName);
            Bitmap bmp = ico.ToBitmap();
            MemoryStream ms = new MemoryStream();
            bmp.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            return ms.ToArray();
        }

        public async Task<object> GetWindowColor(object input)
        {
            IntPtr windowHandle = new IntPtr((int)input);
            Process process = Util.GetProcessByWindow(windowHandle);
            Icon ico = Icon.ExtractAssociatedIcon(process.MainModule.FileName);
            Bitmap bmp = ico.ToBitmap();
            return Util.GetIconColor(bmp);
        }
    }
}
